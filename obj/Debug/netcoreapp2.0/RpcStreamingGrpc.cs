// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RpcStreaming.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class RpcStreamingService
{
  static readonly string __ServiceName = "RpcStreamingService";

  static readonly grpc::Marshaller<global::StreamRequest> __Marshaller_StreamRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StreamRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::StreamContent> __Marshaller_StreamContent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::StreamContent.Parser.ParseFrom);

  static readonly grpc::Method<global::StreamRequest, global::StreamContent> __Method_GetStreamContent = new grpc::Method<global::StreamRequest, global::StreamContent>(
      grpc::MethodType.ServerStreaming,
      __ServiceName,
      "GetStreamContent",
      __Marshaller_StreamRequest,
      __Marshaller_StreamContent);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::RpcStreamingReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of RpcStreamingService</summary>
  public abstract partial class RpcStreamingServiceBase
  {
    public virtual global::System.Threading.Tasks.Task GetStreamContent(global::StreamRequest request, grpc::IServerStreamWriter<global::StreamContent> responseStream, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for RpcStreamingService</summary>
  public partial class RpcStreamingServiceClient : grpc::ClientBase<RpcStreamingServiceClient>
  {
    /// <summary>Creates a new client for RpcStreamingService</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public RpcStreamingServiceClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for RpcStreamingService that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public RpcStreamingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected RpcStreamingServiceClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected RpcStreamingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual grpc::AsyncServerStreamingCall<global::StreamContent> GetStreamContent(global::StreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return GetStreamContent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncServerStreamingCall<global::StreamContent> GetStreamContent(global::StreamRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncServerStreamingCall(__Method_GetStreamContent, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override RpcStreamingServiceClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new RpcStreamingServiceClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(RpcStreamingServiceBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_GetStreamContent, serviceImpl.GetStreamContent).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, RpcStreamingServiceBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_GetStreamContent, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::StreamRequest, global::StreamContent>(serviceImpl.GetStreamContent));
  }

}
#endregion
